<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_playerStopUp</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// x,y velocity
vx = 0;
vy = 0;
// The speed the player will move at
player_speed = 3;

timer = 0;
state = "IDLE";

sprite_walk = spr_playerUp;
sprite_attack = spr_playerAttackUp;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>anim_speed = 0.1;

switch (state) 
{
    case "ATTACK_KNIFE_START":
    {
        image_speed = 0; 
        vx = 0;
        vy = 0;
        
        timer = 15;
        
        sprite_index = sprite_attack;
        image_index = 0;
        image_speed += 0.1;
        state = "ATTACK_KNIFE"
        
        break;
    }
    
    case "ATTACK_KNIFE":
    {
        if (timer &gt; 0)
        {
        
            timer -= 1;
        }
        else
        {
            state = "IDLE";
        }
        
        break;
    }

    case "IDLE":
    {
        image_speed = 0;
        sprite_index = sprite_walk;
        image_index = 0;
        vx = 0;
        vy = 0;
        
        checkInputAll();
        
        break;
    }
    
    case "UP":
    {
        
        image_speed = anim_speed;
        sprite_walk = spr_playerUp;
        sprite_attack = spr_playerAttackUp;
        sprite_index = sprite_walk;
        
        
        vx = 0;
        vy = -1 * player_speed;
        
       checkInputAll();
        
        break;
    }
    case "DOWN":
    {
        image_speed = anim_speed;
        sprite_walk = spr_playerDown;
        sprite_attack = spr_playerAttackDown;
        sprite_index = sprite_walk;
        
        
        vx = 0;
        vy = player_speed;
        
        checkInputAll();
        
        break;
    }
    case "LEFT":
    {
        image_speed = anim_speed;
        sprite_walk = spr_playerLeft;
        sprite_attack = spr_playerAttackLeft;
        sprite_index = sprite_walk;
        
        
        vx = -1 * player_speed;;
        vy = 0;
        
       checkInputAll();
        
        break;
    }    
    case "RIGHT":
    {
        image_speed = anim_speed;
        sprite_walk = spr_playerRight;
        sprite_attack = spr_playerAttackRight;
        sprite_index = sprite_walk;
        
        
        vx = player_speed;
        vy = 0;
        
        checkInputAll();
        
        break;
    }
}

// Collision checking
repeat (abs(vx))
    {
        if (!place_meeting(x + sign(vx), y, obj_solid))
        {
            x += sign(vx);
        }
        else
        {
        break;
        }
    }
    
repeat (abs(vy))
    {
        if (!place_meeting(x, y + sign(vy), obj_solid))
        {
            y += sign(vy);
        }
        else
        {
        break;
        }
    }





// The controls themselves can be found in the 'obj_input' Object
/*
This is outdated movement controls. This is great for basic games however.
// abs is absolute value
// obj_input.right is referencing the 'right' variable, in the 'obj_input' Object
// If the absolute value of vy = 0, then you can press the left and right keys and vice versa
// This makes it so the player character cannot go diagonally as you cannot press left and right if up or down is also pressed, and vice versa
if (abs(vy) == 0) vx = (obj_input.right - obj_input.left) * player_speed;
if (abs(vx) == 0) vy = (obj_input.down - obj_input.up) * player_speed;

// This is setting the user made vx/vy variable to the x and y coordinates
x += vx;
y += vy;
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
